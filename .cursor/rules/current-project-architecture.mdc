---
description: 
globs: 
alwaysApply: true
---
# Adjourn - Current Project Architecture (2024)

**⚠️ IMPORTANT: The [adjourn-development.mdc](mdc:.cursor/rules/adjourn-development.mdc) rule is HISTORICAL REFERENCE ONLY. This rule documents the actual current state of the project as of December 2024.**

## Project Overview
Adjourn is a mobile-first journaling app with AI companion features. The project has been fully implemented with a working Supabase backend, optimized React Query caching, and production-ready mobile PWA experience.

## Current Codebase Structure

### Primary Working Application
**ONLY work with [v0-app/](mdc:v0-app)** - This is the complete, production-ready application with:
- Full Supabase backend integration
- Optimized React Query caching system
- Mobile-first responsive design
- Working authentication and data persistence
- Image upload with compression
- AI writing assistance
- PWA capabilities

### Legacy Directories (DO NOT USE)
- `adjourn-app/` - Basic scaffolding only, not functional
- References to other directories in old documentation

## Current Tech Stack (Implemented)

### Frontend (Production Ready)
- **Framework**: Next.js 14 (App Router)
- **Styling**: Tailwind CSS with mobile-first design
- **State Management**: React Query with localStorage persistence
- **Authentication**: Supabase Auth with Google OAuth + email/password
- **Database**: Supabase PostgreSQL with RLS policies
- **Image Handling**: Browser compression + Supabase Storage
- **AI Integration**: Google Gemini 2.5 Flash via API routes

### Key Dependencies in [v0-app/package.json](mdc:v0-app/package.json)
- `@supabase/supabase-js` - Database and auth
- `@tanstack/react-query` - State management and caching
- `next` - React framework
- `tailwindcss` - Styling
- `lucide-react` - Icons
- `browser-image-compression` - Image optimization

## Database Schema (Implemented)

### Schema Reference: [v0-app/types/database.ts](mdc:v0-app/types/database.ts)
Complete TypeScript definitions for all tables:

#### Core Tables (All Implemented)
- `journals` - User journal containers
- `entries` - Daily journal entries with auto-save
- `images` - Photo attachments with storage paths
- `streaks` - Writing streak tracking
- `ai_conversations` - AI chat history
- `ai_messages` - Individual AI messages
- `prompts` - Daily writing prompts
- `user_preferences` - Settings and preferences
- `offline_queue` - Offline sync support

#### Key Database Features
- UUID primary keys throughout
- Row Level Security (RLS) on all tables
- Proper foreign key relationships
- Optimized indexes for mobile queries

## Current Hook Architecture (Optimized)

### Primary Hooks in [v0-app/hooks/](mdc:v0-app/hooks)

#### Authentication
- [useAuth.ts](mdc:hooks/useAuth.ts) - Google OAuth + email/password auth with Supabase

#### Optimized Data Hooks (USE THESE)
- [useOptimizedHooks.ts](mdc:v0-app/hooks/useOptimizedHooks.ts) - **Main export file**
- [useEntriesOptimized.ts](mdc:v0-app/hooks/useEntriesOptimized.ts) - Journal entries with React Query
- [useJournalsOptimized.ts](mdc:v0-app/hooks/useJournalsOptimized.ts) - Journal containers
- [useStreaksOptimized.ts](mdc:v0-app/hooks/useStreaksOptimized.ts) - Writing streaks
- [useTodayEntryOptimized.ts](mdc:v0-app/hooks/useTodayEntryOptimized.ts) - Today's entry

#### Legacy Hooks (Reference Only)
- [useEntries.ts](mdc:v0-app/hooks/useEntries.ts) - Non-optimized version
- [useJournals.ts](mdc:v0-app/hooks/useJournals.ts) - Non-optimized version
- [useStreaks.ts](mdc:v0-app/hooks/useStreaks.ts) - Non-optimized version

#### Specialized Hooks
- [useImages.ts](mdc:v0-app/hooks/useImages.ts) - Image upload and management
- [useAI.ts](mdc:v0-app/hooks/useAI.ts) - AI writing assistance
- [useGallery.ts](mdc:v0-app/hooks/useGallery.ts) - Photo gallery view

## Component Architecture (Current)

### Shared Components in [v0-app/components/](mdc:v0-app/components)

#### Core UI Components
- [EntryEditor.tsx](mdc:v0-app/components/EntryEditor.tsx) - **Main editor component** (shared by /today and /entry/[id])
- [polaroid-gallery.tsx](mdc:v0-app/components/polaroid-gallery.tsx) - Photo carousel
- [bottom-navigation.tsx](mdc:v0-app/components/bottom-navigation.tsx) - Mobile navigation
- [desktop-sidebar.tsx](mdc:v0-app/components/desktop-sidebar.tsx) - Desktop sidebar

#### Specialized Components
- [ai-writing-assistant.tsx](mdc:v0-app/components/ai-writing-assistant.tsx) - AI chat interface
- [voice-recorder.tsx](mdc:v0-app/components/voice-recorder.tsx) - Voice-to-text
- [image-modal.tsx](mdc:v0-app/components/image-modal.tsx) - Image viewing
- [streak-display.tsx](mdc:v0-app/components/streak-display.tsx) - Writing streak UI

#### UI Library [v0-app/components/ui/](mdc:v0-app/components/ui)
- Complete shadcn/ui component library
- [formatting-toolbar.tsx](mdc:v0-app/components/ui/formatting-toolbar.tsx) - Text formatting
- [markdown-preview.tsx](mdc:v0-app/components/ui/markdown-preview.tsx) - Markdown rendering

## Page Architecture (Current)

### App Router Structure [v0-app/app/](mdc:v0-app/app)

#### Main Pages (All Functional)
- [page.tsx](mdc:v0-app/app/page.tsx) - Landing/auth page
- [today/page.tsx](mdc:v0-app/app/today/page.tsx) - Today's journal entry
- [entry/[id]/page.tsx](mdc:v0-app/app/entry/[id]/page.tsx) - Specific entry editor
- [journals/page.tsx](mdc:v0-app/app/journals/page.tsx) - Entry list view
- [calendar/page.tsx](mdc:v0-app/app/calendar/page.tsx) - Calendar view
- [gallery/page.tsx](mdc:v0-app/app/gallery/page.tsx) - Photo gallery
- [muse/page.tsx](mdc:v0-app/app/muse/page.tsx) - AI writing assistant
- [settings/page.tsx](mdc:v0-app/app/settings/page.tsx) - User preferences

#### API Routes [v0-app/app/api/](mdc:v0-app/app/api)
- [ai/chat/route.ts](mdc:v0-app/app/api/ai/chat/route.ts) - AI conversation API
- [auth/callback/route.ts](mdc:v0-app/app/auth/callback/route.ts) - Auth callback handler

## Performance Optimizations (Implemented)

### React Query Caching System
- **File**: [v0-app/lib/queryClient.ts](mdc:v0-app/lib/queryClient.ts)
- 5-minute stale time for fresh data
- 30-minute garbage collection
- localStorage persistence for offline access
- Optimistic updates for instant UI responses

### Key Performance Features
- 95% performance improvement through caching
- Background sync when online
- Offline-first data access
- Intelligent cache invalidation

## Image System (Production Ready)

### Image Compression [v0-app/lib/imageCompression.ts](mdc:v0-app/lib/imageCompression.ts)
- Browser-based compression (no Web Workers on mobile)
- WebP format conversion
- Maximum 1200px width for mobile
- Fallback compression when Web Workers fail

### Storage Integration
- Supabase Storage bucket: `entry-images`
- Proper RLS policies for security
- Public URLs for image access
- Automatic cleanup of unused images

## Current Configuration Files

### Essential Config
- [v0-app/next.config.mjs](mdc:v0-app/next.config.mjs) - Next.js configuration
- [v0-app/tailwind.config.ts](mdc:v0-app/tailwind.config.ts) - Tailwind CSS setup
- [v0-app/tsconfig.json](mdc:v0-app/tsconfig.json) - TypeScript configuration
- [v0-app/lib/supabase.ts](mdc:v0-app/lib/supabase.ts) - Supabase client setup

### PWA Configuration
- [v0-app/public/manifest.json](mdc:v0-app/public/manifest.json) - PWA manifest
- Service worker configuration for offline support

## Development Patterns (Current Implementation)

### Hook Usage Pattern
```typescript
// Always use optimized hooks
import { useAuth, useEntries, useJournals, useStreaks } from "@/hooks/useOptimizedHooks"

// Individual optimized hooks when needed
import { useEntriesOptimized } from "@/hooks/useEntriesOptimized"
```

### Component Pattern (EntryEditor)
Both `/today` and `/entry/[id]` pages now use the shared [EntryEditor.tsx](mdc:v0-app/components/EntryEditor.tsx) component:
- Unified UI/UX across both editing contexts
- Shared formatting toolbar, polaroid gallery, and mobile optimizations
- Props-based configuration for different modes

### Auto-save Implementation
- 1-second debounced auto-save
- Optimistic UI updates
- localStorage backup for offline edits
- Visual save indicators

## Mobile Optimizations (Implemented)

### Mobile-First Design
- Bottom navigation for mobile
- Sticky headers on long content
- Polaroid gallery with proper overflow handling
- Touch-optimized formatting toolbar
- Keyboard-aware viewport adjustments

### Performance on Mobile
- Optimized image loading and compression
- Efficient React Query caching
- Minimal JavaScript execution during scrolling
- Hardware-accelerated animations

## Known Issues (Fixed)

### Recently Resolved
- ✅ Infinite loops in useStreaks and useEntries hooks
- ✅ Mobile image compression failures
- ✅ Polaroid gallery overflow on mobile
- ✅ Toolbar/polaroid stacking issues
- ✅ Horizontal scroll problems on mobile
- ✅ Missing desktop sidebar after refactor

## Current Project Status

### Production Ready Features
- ✅ Complete authentication system
- ✅ Real-time auto-save with offline support
- ✅ Image upload and compression
- ✅ AI writing assistance
- ✅ Mobile-optimized PWA experience
- ✅ Performance-optimized data layer
- ✅ Responsive design (mobile-first)

### Architecture Highlights
- **Single Editor Component**: Both /today and /entry/[id] use shared EntryEditor
- **Optimized Caching**: React Query with localStorage persistence
- **Mobile Focus**: Touch-optimized UI with proper stacking
- **Production Backend**: Full Supabase integration with RLS

## Development Guidelines

### When Adding Features
1. Use [v0-app/](mdc:v0-app) as the working directory
2. Import from `useOptimizedHooks` for data access
3. Follow mobile-first responsive patterns
4. Test on actual mobile devices
5. Maintain the shared EntryEditor pattern for consistency

### File Organization Principles
- Components are organized by feature, not by type
- Hooks are optimized for React Query caching
- Pages use shared components for consistency
- Configuration is centralized in lib/ directory

---

**This rule reflects the actual current state of the Adjourn project as of December 2024. For historical context only, refer to [adjourn-development.mdc](mdc:.cursor/rules/adjourn-development.mdc).**

